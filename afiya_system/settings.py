"""
Django settings for afiya_system project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Load SECRET_KEY from environment variable, with a default for local development (change the default!)
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-change-this-default-key-locally')

# SECURITY WARNING: don't run with debug turned on in production!
# Load DEBUG from environment variable, defaulting to 'False' for safety
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# Load ALLOWED_HOSTS from environment variable (comma-separated string)
# Example value in production: 'yourdomain.com,www.yourdomain.com,yourrenderapp.onrender.com'
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # Add whitenoise (before staticfiles)
    'django.contrib.staticfiles', # Essential for static files

    # Third-party apps
    'rest_framework',           # Django REST Framework
    'corsheaders',              # For handling CORS
    'django_filters',           # For filtering in DRF (if used, otherwise optional)
    'rest_framework.authtoken', # For token authentication

    # Your apps
    'afiya.apps.AfiyaConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Whitenoise Middleware should be placed high up, right after SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware', # Handles session auth
    'corsheaders.middleware.CorsMiddleware', # Should be high up, but after sessions/whitenoise if needed
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Handles user auth
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS Configuration - Load allowed origins from environment variable
# Example value: 'http://localhost:5500,http://127.0.0.1:5500,https://yourfrontend.onrender.com'
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:5500,http://127.0.0.1:5500').split(',')

# Allow credentials (like cookies for session auth) to be sent from these origins
CORS_ALLOW_CREDENTIALS = True

# Trust your frontend origin for CSRF purposes when credentials are involved
# Load trusted origins from environment variable
# Example value: 'http://localhost:5500,https://yourbackend.onrender.com'
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'http://127.0.0.1:5500,http://localhost:5500').split(',')


ROOT_URLCONF = 'afiya_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Tell Django where to find your HTML templates (like index.html, login.html)
        # Assuming they are in a 'frontend' directory at the project root
        'DIRS': [os.path.join(BASE_DIR, 'frontend')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'afiya_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Use dj-database-url to parse the DATABASE_URL environment variable
# Fallback to SQLite for local development if DATABASE_URL is not set
DATABASES = {
    'default': dj_database_url.config(
        default=f'sqlite:///{BASE_DIR / "db.sqlite3"}',
        conn_max_age=600 # Optional: Number of seconds database connections should persist
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Consider setting to your local timezone, e.g., 'Africa/Nairobi'
TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True # Recommended to keep True, especially with UTC


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/' # The URL prefix for static files served

# Directory where Django's `collectstatic` will gather static files for deployment
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Tell Whitenoise to use compressed static files and add cache-busting hashes
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Directories where Django will look for static files IN ADDITION to each app's 'static/' dir
# Useful if you have a central 'static' or 'frontend/static' folder for project-wide assets
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend'), # If 'frontend' contains static assets directly
    # os.path.join(BASE_DIR, 'static'), # Or if you have a 'static' folder
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Useful for browser-based interaction (login/logout) and the browsable API
        'rest_framework.authentication.SessionAuthentication',
        # Useful if you plan to use API tokens for external clients or mobile apps
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # By default, require authentication unless overridden in a specific view.
        # This is generally safer than AllowAny. Your views already specify
        # permissions, but this sets a secure default.
        'rest_framework.permissions.IsAuthenticated',
        # If you want AllowAny by default and secure views individually:
        # 'rest_framework.permissions.AllowAny',
    ],

    # Optional: Add default pagination, filtering, etc. here if desired
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10
}

# Optional: Define where users are redirected after login/logout via DRF's browsable API
# LOGIN_URL = 'rest_framework:login' # Use DRF's login view
# LOGOUT_URL = 'rest_framework:logout' # Use DRF's logout view
# LOGIN_REDIRECT_URL = '/' # Redirect to home page after login
# LOGOUT_REDIRECT_URL = '/login.html' # Redirect to login page after logout
